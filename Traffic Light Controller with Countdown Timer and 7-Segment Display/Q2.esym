D G "S2_G" 0 12 "PIN_B3"
D G "__PCH__" 0 95 ""5.015""
D G "__DEVICE__" 0 95 "2221"
D G "__DATE__" 0 95 ""20-mar-24""
D G "__TIME__" 0 95 ""10:28:06"" "EXEMPLO  03. SEMÁFORO SIMPLES"
c L "set_tris_a" 1 1 6 "FUNCTION"
v L "value" 1 43 "int8" `54 
f B "set_tris_a" 1 43 "void(int8 value)" `53 
v L "value" 1 44 "int8" `56 
f B "set_tris_b" 1 44 "void(int8 value)" `55 
v L "value" 1 45 "int8" `58 
f B "set_tris_c" 1 45 "void(int8 value)" `57 
v L "value" 1 46 "int8" `60 
f B "set_tris_e" 1 46 "void(int8 value)" `59 
f B "get_tris_a" 1 47 "int8()" `61 
f B "get_tris_b" 1 48 "int8()" `62 
f B "get_tris_c" 1 49 "int8()" `63 
f B "get_tris_e" 1 50 "int8()" `64 
v L "value" 1 51 "int8" `66 
f B "output_a" 1 51 "void(int8 value)" `65 
v L "value" 1 52 "int8" `68 
f B "output_b" 1 52 "void(int8 value)" `67 
v L "value" 1 53 "int8" `70 
f B "output_c" 1 53 "void(int8 value)" `69 
v L "value" 1 54 "int8" `72 
f B "output_e" 1 54 "void(int8 value)" `71 
f B "input_a" 1 55 "int8()" `73 
f B "input_b" 1 56 "int8()" `74 
f B "input_c" 1 57 "int8()" `75 
f B "input_e" 1 58 "int8()" `76 
f B "input_change_a" 1 59 "int8()" `77 
f B "input_change_b" 1 60 "int8()" `78 
f B "input_change_c" 1 61 "int8()" `79 
f B "input_change_e" 1 62 "int8()" `80 
v L "pin" 1 63 "int16" `82 
f B "input" 1 63 "int8(int16 pin)" `81 
v L "pin" 1 64 "int16" `84 
f B "input_state" 1 64 "int8(int16 pin)" `83 
v L "pin" 1 65 "int16" `86 
f B "output_low" 1 65 "void(int16 pin)" `85 
v L "pin" 1 66 "int16" `88 
f B "output_high" 1 66 "void(int16 pin)" `87 
v L "pin" 1 67 "int16" `90 
f B "output_toggle" 1 67 "void(int16 pin)" `89 
v L "pin" 1 68 "int16" `92 
v L "level" 1 68 "int8" `93 
f B "output_bit" 1 68 "void(int16 pin,int8 level)" `91 
v L "pin" 1 69 "int16" `95 
f B "output_float" 1 69 "void(int16 pin)" `94 
v L "pin" 1 70 "int16" `97 
f B "output_drive" 1 70 "void(int16 pin)" `96  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 74 "31744"
d G "PIN_A1" 1 75 "31745"
d G "PIN_A2" 1 76 "31746"
d G "PIN_A3" 1 77 "31747"
d G "PIN_A4" 1 78 "31748"
d G "PIN_A5" 1 79 "31749"
d G "PIN_A6" 1 80 "31750"
d G "PIN_A7" 1 81 "31751"
d G "PIN_B0" 1 83 "31752"
d G "PIN_B1" 1 84 "31753"
d G "PIN_B2" 1 85 "31754"
d G "PIN_B3" 1 86 "31755"
d G "PIN_B4" 1 87 "31756"
d G "PIN_B5" 1 88 "31757"
d G "PIN_B6" 1 89 "31758"
d G "PIN_B7" 1 90 "31759"
d G "PIN_C0" 1 92 "31760"
d G "PIN_C1" 1 93 "31761"
d G "PIN_C2" 1 94 "31762"
d G "PIN_C3" 1 95 "31763"
d G "PIN_C4" 1 96 "31764"
d G "PIN_C5" 1 97 "31765"
d G "PIN_C6" 1 98 "31766"
d G "PIN_C7" 1 99 "31767"
d G "PIN_E3" 1 101 "31779"
d G "FALSE" 1 104 "0"
d G "TRUE" 1 105 "1"
d G "BYTE" 1 107 "int8"
d G "BOOLEAN" 1 108 "int1"
d G "getc" 1 110 "getch"
d G "fgetc" 1 111 "getch"
d G "getchar" 1 112 "getch"
d G "putc" 1 113 "putchar"
d G "fputc" 1 114 "putchar"
d G "fgets" 1 115 "gets"
d G "fputs" 1 116 "puts"
c L "output_drive" 1 1 3 "FUNCTION"
f B "restart_cause" 1 121 "int8()" `98 
f B "reset_cpu" 1 122 "void()" `99 
f B "sleep" 1 123 "void()" `100 
v L "type" 1 124 "int8" `102 
f G "sleep" 1 124 "void(int8 type)" `101  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 1 126 "7"
d G "MCLR_FROM_SLEEP" 1 127 "11"
d G "MCLR_FROM_RUN" 1 128 "15"
d G "NORMAL_POWER_UP" 1 129 "12"
d G "BROWNOUT_RESTART" 1 130 "14"
d G "WDT_FROM_SLEEP" 1 131 "3"
d G "RESET_INSTRUCTION" 1 132 "0"
d G "SLEEP_FULL" 1 135 "0" "Default"
d G "SLEEP_IDLE" 1 136 "1" "Clock and peripherals don't stop"
c L "sleep" 1 1 5 "FUNCTION"
v L "mode" 1 143 "int8" `104 
f B "setup_timer_0" 1 143 "void(int8 mode)" `103 
v L "value" 1 144 "int16" `106 
f B "set_timer0" 1 144 "void(int16 value)" `105 
f B "get_timer0" 1 145 "int16()" `107 
v L "mode" 1 146 "int8" `109 
v L "prescaler" 1 146 "int8" `110 
f B "setup_counters" 1 146 "void(int8 mode,int8 prescaler)" `108 
v L "value" 1 147 "int16" `112 
f B "set_rtcc" 1 147 "void(int16 value)" `111 
f B "get_rtcc" 1 148 "int16()" `113  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 150 "0"
d G "T0_EXT_L_TO_H" 1 151 "32"
d G "T0_EXT_H_TO_L" 1 152 "48"
d G "T0_DIV_1" 1 154 "8"
d G "T0_DIV_2" 1 155 "0"
d G "T0_DIV_4" 1 156 "1"
d G "T0_DIV_8" 1 157 "2"
d G "T0_DIV_16" 1 158 "3"
d G "T0_DIV_32" 1 159 "4"
d G "T0_DIV_64" 1 160 "5"
d G "T0_DIV_128" 1 161 "6"
d G "T0_DIV_256" 1 162 "7"
d G "T0_OFF" 1 164 "0x80"
d G "T0_8_BIT" 1 166 "0x40"
d G "RTCC_INTERNAL" 1 168 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 169 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 170 "48"
d G "RTCC_DIV_1" 1 171 "8"
d G "RTCC_DIV_2" 1 172 "0"
d G "RTCC_DIV_4" 1 173 "1"
d G "RTCC_DIV_8" 1 174 "2"
d G "RTCC_DIV_16" 1 175 "3"
d G "RTCC_DIV_32" 1 176 "4"
d G "RTCC_DIV_64" 1 177 "5"
d G "RTCC_DIV_128" 1 178 "6"
d G "RTCC_DIV_256" 1 179 "7"
d G "RTCC_OFF" 1 180 "0x80"
d G "RTCC_8_BIT" 1 181 "0x40"
c L "get_rtcc" 1 1 8 "FUNCTION"
v L "mode" 1 192 "int16" `115 
f B "setup_wdt" 1 192 "void(int16 mode)" `114 
f B "restart_wdt" 1 193 "void()" `116  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 1 195 "0x100"
d G "WDT_OFF" 1 196 "0"
d G "WDT_4MS" 1 198 "0x300"
d G "WDT_8MS" 1 199 "0x500"
d G "WDT_16MS" 1 200 "0x700"
d G "WDT_32MS" 1 201 "0x900"
d G "WDT_64MS" 1 202 "0xB00"
d G "WDT_128MS" 1 203 "0xD00"
d G "WDT_256MS" 1 204 "0xF00"
d G "WDT_512MS" 1 205 "0x1100"
d G "WDT_1S" 1 206 "0x1300"
d G "WDT_2S" 1 207 "0x1500"
d G "WDT_4S" 1 208 "0x1700"
d G "WDT_8S" 1 209 "0x1900"
d G "WDT_16" 1 210 "0x1B00"
d G "WDT_32S" 1 211 "0x1D00"
d G "WDT_64S" 1 212 "0x1F00"
d G "WDT_128S" 1 213 "0x2100"
c L "restart_wdt" 1 1 3 "FUNCTION"
v L "mode" 1 219 "int16" `118 
f B "setup_timer_1" 1 219 "void(int16 mode)" `117 
f B "get_timer1" 1 220 "int16()" `119 
v L "value" 1 221 "int16" `121 
f B "set_timer1" 1 221 "void(int16 value)" `120  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 224 "0"
d G "T1_INTERNAL" 1 225 "0x85"
d G "T1_EXTERNAL" 1 226 "0x87"
d G "T1_EXTERNAL_SYNC" 1 227 "0x83"
d G "T1_CLK_OUT" 1 229 "8"
d G "T1_DIV_BY_1" 1 231 "0"
d G "T1_DIV_BY_2" 1 232 "0x10"
d G "T1_DIV_BY_4" 1 233 "0x20"
d G "T1_DIV_BY_8" 1 234 "0x30"
c L "set_timer1" 1 1 3 "FUNCTION"
v L "mode" 1 239 "int8" `123 
v L "period" 1 239 "int8" `124 
v L "postscale" 1 239 "int8" `125 
f B "setup_timer_2" 1 239 "void(int8 mode,int8 period,int8 postscale)" `122 
f B "get_timer2" 1 240 "int8()" `126 
v L "value" 1 241 "int8" `128 
f B "set_timer2" 1 241 "void(int8 value)" `127  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 243 "0"
d G "T2_DIV_BY_1" 1 244 "4"
d G "T2_DIV_BY_4" 1 245 "5"
d G "T2_DIV_BY_16" 1 246 "6"
c L "set_timer2" 1 1 3 "FUNCTION"
v L "mode" 1 251 "int16" `130 
f B "setup_timer_3" 1 251 "void(int16 mode)" `129 
f B "get_timer3" 1 252 "int16()" `131 
v L "value" 1 253 "int16" `133 
f B "set_timer3" 1 253 "void(int16 value)" `132  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 1 256 "0"
d G "T3_INTERNAL" 1 257 "0x85"
d G "T3_EXTERNAL" 1 258 "0x87"
d G "T3_EXTERNAL_SYNC" 1 259 "0x83"
d G "T3_DIV_BY_1" 1 261 "0"
d G "T3_DIV_BY_2" 1 262 "0x10"
d G "T3_DIV_BY_4" 1 263 "0x20"
d G "T3_DIV_BY_8" 1 264 "0x30"
c L "set_timer3" 1 1 4 "FUNCTION"
v L "mode" 1 270 "int32" `135 
f B "setup_ccp1" 1 270 "void(int32 mode)" `134 
v L "mode" 1 271 "int32" `137 
v L "pwm" 1 271 "int8" `138 
f G "setup_ccp1" 1 271 "void(int32 mode,int8 pwm)" `136 
v L "value" 1 272 "int16" `140 
f B "set_pwm1_duty" 1 272 "void(int16 value)" `139  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 274 "0"
d G "CCP_CAPTURE_FE" 1 275 "4"
d G "CCP_CAPTURE_RE" 1 276 "5"
d G "CCP_CAPTURE_DIV_4" 1 277 "6"
d G "CCP_CAPTURE_DIV_16" 1 278 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 1 279 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 280 "9"
d G "CCP_COMPARE_INT" 1 281 "0xA"
d G "CCP_COMPARE_INT_AND_TOGGLE" 1 282 "0x2"
d G "CCP_COMPARE_RESET_TIMER" 1 283 "0xB"
d G "CCP_PWM" 1 284 "0xC"
d G "CCP_PWM_PLUS_1" 1 285 "0x1c"
d G "CCP_PWM_PLUS_2" 1 286 "0x2c"
d G "CCP_PWM_PLUS_3" 1 287 "0x3c"
c L "set_pwm1_duty" 1 1 1 "FUNCTION"
d G "T3_CCP1_TO_2" 1 293 "0x48"
d G "T3_CCP2" 1 294 "0x8"
c L "set_pwm1_duty" 1 1 1 "FUNCTION"
v L "mode" 1 298 "int32" `145 
f B "setup_ccp2" 1 298 "void(int32 mode)" `144 
v L "mode" 1 299 "int32" `147 
v L "pwm" 1 299 "int8" `148 
f G "setup_ccp2" 1 299 "void(int32 mode,int8 pwm)" `146 
v L "value" 1 300 "int16" `150 
f B "set_pwm2_duty" 1 300 "void(int16 value)" `149 
c L "set_pwm2_duty" 1 1 3 "FUNCTION"
v L "mode" 1 307 "int32" `155 
f B "setup_spi" 1 307 "void(int32 mode)" `154 
v L "value" 1 308 "int8" `157 
f B "spi_write" 1 308 "void(int8 value)" `156 
f B "spi_read" 1 309 "int8()" `158 
v L "value" 1 310 "int8" `160 
f G "spi_read" 1 310 "int8(int8 value)" `159 
f B "spi_data_in" 1 311 "int8()" `161 
v L "mode" 1 312 "int32" `163 
f B "setup_spi2" 1 312 "void(int32 mode)" `162 
v L "value" 1 313 "int8" `165 
f B "spi_write2" 1 313 "void(int8 value)" `164 
f B "spi_read2" 1 314 "int8()" `166 
v L "value" 1 315 "int8" `168 
f G "spi_read2" 1 315 "int8(int8 value)" `167 
f B "spi_data_in2" 1 316 "int8()" `169  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 318 "0x00"
d G "SPI_MASTER" 1 319 "0x20"
d G "SPI_SLAVE" 1 320 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 321 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 322 "0x00"
d G "SPI_CLK_DIV_4" 1 323 "0x00"
d G "SPI_CLK_DIV_16" 1 324 "0x01"
d G "SPI_CLK_DIV_64" 1 325 "0x02"
d G "SPI_CLK_T2" 1 326 "0x03"
d G "SPI_SS_DISABLED" 1 327 "0x01"
d G "SPI_XMIT_L_TO_H" 1 329 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 330 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 332 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 333 "0x8000"
d G "SPI_L_TO_H" 1 336 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 337 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in2" 1 1 2 "FUNCTION"
v L "baud" 1 341 "int32" `171 
f B "setup_uart" 1 341 "void(int32 baud)" `170 
v L "baud" 1 342 "int32" `173 
v L "stream" 1 342 "int8" `174 
f G "setup_uart" 1 342 "void(int32 baud,int8 stream)" `172 
v L "baud" 1 343 "int32" `176 
v L "stream" 1 343 "int8" `177 
v L "clock" 1 343 "int32" `178 
f G "setup_uart" 1 343 "void(int32 baud,int8 stream,int32 clock)" `175 
v L "baud" 1 344 "int32" `180 
f B "set_uart_speed" 1 344 "void(int32 baud)" `179 
v L "baud" 1 345 "int32" `182 
v L "stream" 1 345 "int8" `183 
f G "set_uart_speed" 1 345 "void(int32 baud,int8 stream)" `181 
v L "baud" 1 346 "int32" `185 
v L "stream" 1 346 "int8" `186 
v L "clock" 1 346 "int32" `187 
f G "set_uart_speed" 1 346 "void(int32 baud,int8 stream,int32 clock)" `184  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 350 "2"
d G "UART_DATA" 1 351 "4"
d G "UART_AUTODETECT" 1 352 "8"
d G "UART_AUTODETECT_NOWAIT" 1 353 "9"
d G "UART_WAKEUP_ON_RDA" 1 354 "10"
d G "UART_SEND_BREAK" 1 355 "13"
c L "set_uart_speed" 1 1 3 "FUNCTION"
v L "mode" 1 359 "int32" `189 
f B "setup_comparator" 1 359 "void(int32 mode)" `188  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A3" 1 361 "0xfff04"
d G "A0_A3_A1_A2_OUT_ON_A4_A5" 1 362 "0xfcf03"
d G "A0_A3_A1_A3_OUT_ON_A4_A5" 1 363 "0xbcf05"
d G "NC_NC_NC_NC" 1 364 "0x0ff07"
d G "A0_A3_A1_A2" 1 365 "0xfff02"
d G "A0_A3_NC_NC_OUT_ON_A4" 1 366 "0x9ef01"
d G "A0_VR_A1_VR" 1 367 "0x3ff06"
d G "A3_VR_A2_VR" 1 368 "0xcff0e"
d G "CP1_INVERT" 1 369 "0x0000010"
d G "CP2_INVERT" 1 370 "0x0000020"
c L "setup_comparator" 1 1 2 "FUNCTION"
v L "mode" 1 377 "int8" `193 
f B "setup_vref" 1 377 "void(int8 mode)" `192  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 379 "0xa0"
d G "VREF_HIGH" 1 380 "0x80"
d G "VREF_F5" 1 382 "0x40"
d G "VREF_COMP" 1 383 "0x10"
c L "setup_vref" 1 1 2 "FUNCTION"
v L "mode" 1 387 "int8" `195 
f B "setup_low_volt_detect" 1 387 "void(int8 mode)" `194  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 1 389 "0x1F"
d G "LVD_45" 1 390 "0x1E"
d G "LVD_42" 1 391 "0x1D"
d G "LVD_40" 1 392 "0x1C"
d G "LVD_38" 1 393 "0x1B"
d G "LVD_36" 1 394 "0x1A"
d G "LVD_35" 1 395 "0x19"
d G "LVD_33" 1 396 "0x18"
d G "LVD_30" 1 397 "0x17"
d G "LVD_28" 1 398 "0x16"
d G "LVD_27" 1 399 "0x15"
d G "LVD_25" 1 400 "0x14"
d G "LVD_24" 1 401 "0x13"
d G "LVD_23" 1 402 "0x12"
d G "LVD_22" 1 403 "0x11"
d G "LVD_21" 1 404 "0x10"
d G "LVD_TRIGGER_BELOW" 1 406 "0"
d G "LVD_TRIGGER_ABOVE" 1 407 "0x80"
c L "setup_low_volt_detect" 1 1 2 "FUNCTION"
v L "mode" 1 412 "int8" `197 
f B "setup_oscillator" 1 412 "int8(int8 mode)" `196 
v L "mode" 1 413 "int8" `199 
v L "tune" 1 413 "sint8" `200 
f G "setup_oscillator" 1 413 "int8(int8 mode,sint8 tune)" `198  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 1 416 "0"
d G "OSC_125KHZ" 1 417 "0x10"
d G "OSC_250KHZ" 1 418 "0x20"
d G "OSC_500KHZ" 1 419 "0x30"
d G "OSC_1MHZ" 1 420 "0x40"
d G "OSC_2MHZ" 1 421 "0x50"
d G "OSC_4MHZ" 1 422 "0x60"
d G "OSC_8MHZ" 1 423 "0x70"
d G "OSC_16MHZ" 1 424 "0x4060"
d G "OSC_32MHZ" 1 425 "0x4070"
d G "OSC_TIMER1" 1 427 "1"
d G "OSC_INTRC" 1 428 "2"
d G "OSC_NORMAL" 1 429 "0"
d G "OSC_IDLE_MODE" 1 431 "0x80"
d G "OSC_31250" 1 432 "0x8000"
d G "OSC_PLL_ON" 1 433 "0x4000"
d G "OSC_PLL_OFF" 1 434 "0"
d G "OSC_STATE_STABLE" 1 438 "4"
d G "OSC_STATE_EXT_RUNNING" 1 439 "8"
c L "setup_oscillator" 1 1 4 "FUNCTION"
v L "mode" 1 446 "int16" `202 
f B "setup_adc" 1 446 "void(int16 mode)" `201 
f B "read_adc" 1 447 "int8()" `203 
v L "mode" 1 448 "int8" `205 
f G "read_adc" 1 448 "int8(int8 mode)" `204 
f G "read_adc" 1 449 "int16()" `206 
v L "mode" 1 450 "int8" `208 
f G "read_adc" 1 450 "int16(int8 mode)" `207 
f B "adc_done" 1 451 "int8()" `209  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 453 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 454 "0x100"
d G "ADC_CLOCK_DIV_4" 1 455 "0x04"
d G "ADC_CLOCK_DIV_8" 1 456 "0x01"
d G "ADC_CLOCK_DIV_16" 1 457 "0x05"
d G "ADC_CLOCK_DIV_32" 1 458 "0x02"
d G "ADC_CLOCK_DIV_64" 1 459 "0x06"
d G "ADC_CLOCK_INTERNAL" 1 460 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 1 462 "0x00"
d G "ADC_TAD_MUL_2" 1 463 "0x08"
d G "ADC_TAD_MUL_4" 1 464 "0x10"
d G "ADC_TAD_MUL_6" 1 465 "0x18"
d G "ADC_TAD_MUL_8" 1 466 "0x20"
d G "ADC_TAD_MUL_12" 1 467 "0x28"
d G "ADC_TAD_MUL_16" 1 468 "0x30"
d G "ADC_TAD_MUL_20" 1 469 "0x38"
c L "adc_done" 1 1 1 "FUNCTION"
v L "pins" 1 472 "int8" `211 
f B "setup_adc_ports" 1 472 "void(int8 pins)" `210 
v L "pins" 1 473 "int8" `213 
v L "reference" 1 473 "int8" `214 
f G "setup_adc_ports" 1 473 "void(int8 pins,int8 reference)" `212 
v L "channel" 1 474 "int8" `216 
f B "set_adc_channel" 1 474 "void(int8 channel)" `215  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 1 477 "0x0F" "None"
d G "ALL_ANALOG" 1 478 "0x00" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4 B0"
d G "AN0_TO_AN11" 1 479 "0x03" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4"
d G "AN0_TO_AN10" 1 480 "0x04" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1"
d G "AN0_TO_AN9" 1 481 "0x05" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3"
d G "AN0_TO_AN8" 1 482 "0x06" "A0 A1 A2 A3 A5 E0 E1 E2 B2"
d G "AN0_TO_AN7" 1 483 "0x07" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_TO_AN6" 1 484 "0x08" "A0 A1 A2 A3 A5 E0 E1"
d G "AN0_TO_AN5" 1 485 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_TO_AN4" 1 486 "0x0A" "A0 A1 A2 A3 A5"
d G "AN0_TO_AN3" 1 487 "0x0B" "A0 A1 A2 A3"
d G "AN0_TO_AN2" 1 488 "0x0C" "A0 A1 A2"
d G "AN0_TO_AN1" 1 489 "0x0D" "A0 A1"
d G "AN0" 1 490 "0x0E" "A0"
d G "AN0_TO_AN11_ANALOG" 1 491 "0x03" "!old only provided for compatibility"
d G "AN0_TO_AN10_ANALOG" 1 492 "0x04" "!old only provided for compatibility"
d G "AN0_TO_AN9_ANALOG" 1 493 "0x05" "!old only provided for compatibility"
d G "AN0_TO_AN8_ANALOG" 1 494 "0x06" "!old only provided for compatibility"
d G "AN0_TO_AN7_ANALOG" 1 495 "0x07" "!old only provided for compatibility"
d G "AN0_TO_AN6_ANALOG" 1 496 "0x08" "!old only provided for compatibility"
d G "AN0_TO_AN5_ANALOG" 1 497 "0x09" "!old only provided for compatibility"
d G "AN0_TO_AN4_ANALOG" 1 498 "0x0A" "!old only provided for compatibility"
d G "AN0_TO_AN3_ANALOG" 1 499 "0x0B" "!old only provided for compatibility"
d G "AN0_TO_AN2_ANALOG" 1 500 "0x0C" "!old only provided for compatibility"
d G "AN0_TO_AN1_ANALOG" 1 501 "0x0D" "!old only provided for compatibility"
d G "AN0_ANALOG" 1 502 "0x0E" "!old only provided for compatibility"
d G "VSS_VDD" 1 505 "0x00" "Range 0-Vdd"
d G "VREF_VREF" 1 506 "0x30" "Range VrefL-VrefH"
d G "VREF_VDD" 1 507 "0x20" "Range VrefL-Vdd"
d G "VSS_VREF" 1 508 "0x10" "Range 0-VrefH"
d G "ADC_START_AND_READ" 1 511 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 512 "1"
d G "ADC_READ_ONLY" 1 513 "6"
c L "set_adc_channel" 1 1 3 "FUNCTION"
v L "x" 1 519 "sint8" `218 
f B "abs" 1 519 "sint8(sint8 x)" `217 
v L "x" 1 520 "sint16" `220 
f G "abs" 1 520 "sint16(sint16 x)" `219 
v L "x" 1 521 "sint32" `222 
f G "abs" 1 521 "sint32(sint32 x)" `221 
v L "x" 1 522 "float" `224 
f G "abs" 1 522 "float(float x)" `223 
v L "??65535" 1 523 "int8" `226 
v L "??65535" 1 523 "int8" `227 
f B "_mul" 1 523 "int16(int8 ,int8 )" `225 
v L "??65535" 1 524 "sint8" `226 
v L "??65535" 1 524 "sint8" `230 
f G "_mul" 1 524 "sint16(sint8 ,sint8 )" `228 
v L "??65535" 1 525 "int16" `226 
v L "??65535" 1 525 "int16" `233 
f G "_mul" 1 525 "int32(int16 ,int16 )" `231 
v L "??65535" 1 526 "sint16" `226 
v L "??65535" 1 526 "sint16" `236 
f G "_mul" 1 526 "sint32(sint16 ,sint16 )" `234  "Memory Manipulation Prototypes:"
v L "bank" 1 529 "int8" `238 
v L "offset" 1 529 "int8" `239 
f B "read_bank" 1 529 "int8(int8 bank,int8 offset)" `237 
v L "bank" 1 530 "int8" `241 
v L "offset" 1 530 "int8" `242 
v L "value" 1 530 "int8" `243 
f B "write_bank" 1 530 "void(int8 bank,int8 offset,int8 value)" `240 
v L "dest" 1 531 "*int8" `245 
v L "src" 1 531 "*int8" `246 
f B "strcpy" 1 531 "void(*int8 dest,*int8 src)" `244 
v L "dest" 1 532 "*int8" `248 
v L "src" 1 532 "*int8" `249 
f B "strcopy" 1 532 "void(*int8 dest,*int8 src)" `247 
v L "destination" 1 533 "*int8" `251 
v L "value" 1 533 "int8" `252 
v L "num" 1 533 "int16" `253 
f B "memset" 1 533 "void(*int8 destination,int8 value,int16 num)" `250 
v L "destination" 1 534 "*int8" `255 
v L "source" 1 534 "*int8" `256 
v L "num" 1 534 "int16" `257 
f B "memcpy" 1 534 "void(*int8 destination,*int8 source,int16 num)" `254  "String Prototypes:"
v L "cvalue" 1 537 "int8" `259 
f B "toupper" 1 537 "int8(int8 cvalue)" `258 
v L "cvalue" 1 538 "int8" `261 
f B "tolower" 1 538 "int8(int8 cvalue)" `260 
v L "string" 1 539 "*int8" `263 
v L "cstring" 1 539 "*int8" `264 
f B "sprintf" 1 539 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `262  "Data Manipulators Prototypes:"
v L "address" 1 542 "*int8" `267 
v L "bytes" 1 542 "int8" `268 
v L "value" 1 542 "int8" `269 
f B "shift_left" 1 542 "int8(*int8 address,int8 bytes,int8 value)" `266 
v L "address" 1 543 "*int8" `271 
v L "bytes" 1 543 "int8" `272 
v L "value" 1 543 "int8" `273 
f B "shift_right" 1 543 "int8(*int8 address,int8 bytes,int8 value)" `270 
v L "address" 1 544 "*int8" `275 
v L "bytes" 1 544 "int8" `276 
f B "rotate_left" 1 544 "void(*int8 address,int8 bytes)" `274 
v L "address" 1 545 "*int8" `278 
v L "bytes" 1 545 "int8" `279 
f B "rotate_right" 1 545 "void(*int8 address,int8 bytes)" `277 
v L "value" 1 546 "int8" `281 
f B "swap" 1 546 "void(int8 value)" `280 
v L "var" 1 547 "int16" `283 
v L "offset" 1 547 "int8" `284 
f B "make8" 1 547 "int8(int16 var,int8 offset)" `282 
v L "var" 1 548 "int32" `283 
v L "offset" 1 548 "int8" `287 
f G "make8" 1 548 "int8(int32 var,int8 offset)" `285 
v L "varhigh" 1 549 "int8" `289 
v L "varlow" 1 549 "int8" `290 
f B "make16" 1 549 "int16(int8 varhigh,int8 varlow)" `288 
v L "var1" 1 550 "int16" `292 
f B "make32" 1 550 "int32(int16 var1)" `291 
v L "var1" 1 551 "int16" `294 
v L "var2" 1 551 "int16" `295 
f G "make32" 1 551 "int32(int16 var1,int16 var2)" `293 
v L "var1" 1 552 "int16" `294 
v L "var2" 1 552 "int8" `298 
f G "make32" 1 552 "int32(int16 var1,int8 var2)" `296 
v L "var1" 1 553 "int16" `300 
v L "var2" 1 553 "int8" `301 
v L "var3" 1 553 "int8" `302 
f G "make32" 1 553 "int32(int16 var1,int8 var2,int8 var3)" `299 
v L "var1" 1 554 "int8" `304 
f G "make32" 1 554 "int32(int8 var1)" `303 
v L "var1" 1 555 "int8" `294 
v L "var2" 1 555 "int8" `307 
f G "make32" 1 555 "int32(int8 var1,int8 var2)" `305 
v L "var1" 1 556 "int8" `300 
v L "var2" 1 556 "int8" `301 
v L "var3" 1 556 "int8" `311 
f G "make32" 1 556 "int32(int8 var1,int8 var2,int8 var3)" `308 
v L "var1" 1 557 "int8" `313 
v L "var2" 1 557 "int8" `314 
v L "var3" 1 557 "int8" `315 
v L "var4" 1 557 "int8" `316 
f G "make32" 1 557 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `312 
v L "var1" 1 558 "int8" `294 
v L "var2" 1 558 "int16" `319 
f G "make32" 1 558 "int32(int8 var1,int16 var2)" `317 
v L "var1" 1 559 "int8" `300 
v L "var2" 1 559 "int16" `301 
v L "var3" 1 559 "int8" `323 
f G "make32" 1 559 "int32(int8 var1,int16 var2,int8 var3)" `320 
v L "var1" 1 560 "int8" `300 
v L "var2" 1 560 "int8" `301 
v L "var3" 1 560 "int16" `327 
f G "make32" 1 560 "int32(int8 var1,int8 var2,int16 var3)" `324 
v L "var" 1 561 "int8" `329 
v L "bit" 1 561 "int8" `330 
f B "bit_set" 1 561 "void(int8 var,int8 bit)" `328 
v L "var" 1 562 "int16" `329 
v L "bit" 1 562 "int8" `333 
f G "bit_set" 1 562 "void(int16 var,int8 bit)" `331 
v L "var" 1 563 "int32" `329 
v L "bit" 1 563 "int8" `336 
f G "bit_set" 1 563 "void(int32 var,int8 bit)" `334 
v L "var" 1 564 "int8" `338 
v L "bit" 1 564 "int8" `339 
f B "bit_clear" 1 564 "void(int8 var,int8 bit)" `337 
v L "var" 1 565 "int16" `338 
v L "bit" 1 565 "int8" `342 
f G "bit_clear" 1 565 "void(int16 var,int8 bit)" `340 
v L "var" 1 566 "int32" `338 
v L "bit" 1 566 "int8" `345 
f G "bit_clear" 1 566 "void(int32 var,int8 bit)" `343 
v L "var" 1 567 "int8" `347 
v L "bit" 1 567 "int8" `348 
f B "bit_test" 1 567 "int8(int8 var,int8 bit)" `346 
v L "var" 1 568 "int16" `347 
v L "bit" 1 568 "int8" `351 
f G "bit_test" 1 568 "int8(int16 var,int8 bit)" `349 
v L "var" 1 569 "int32" `347 
v L "bit" 1 569 "int8" `354 
f G "bit_test" 1 569 "int8(int32 var,int8 bit)" `352  "#use delay() Prototypes:"
v L "count" 1 572 "int8" `356 
f B "delay_cycles" 1 572 "void(int8 count)" `355 
v L "time" 1 573 "int16" `358 
f B "delay_ms" 1 573 "void(int16 time)" `357 
v L "time" 1 574 "int16" `360 
f B "delay_us" 1 574 "void(int16 time)" `359  "#use rs232() Prototypes:"
v L "cdata" 1 577 "int8" `362 
f B "putchar" 1 577 "void(int8 cdata)" `361 
v L "cdata" 1 578 "int8" `364 
v L "stream" 1 578 "int8" `365 
f G "putchar" 1 578 "void(int8 cdata,int8 stream)" `363 
v L "string" 1 579 "*int8" `367 
f B "puts" 1 579 "void(*int8 string)" `366 
v L "string" 1 580 "*int8" `369 
v L "stream" 1 580 "int8" `370 
f G "puts" 1 580 "void(*int8 string,int8 stream)" `368 
f B "getch" 1 581 "int8()" `371 
v L "stream" 1 582 "int8" `373 
f G "getch" 1 582 "int8(int8 stream)" `372 
v L "string" 1 583 "*int8" `375 
f B "gets" 1 583 "void(*int8 string)" `374 
v L "string" 1 584 "*int8" `377 
v L "stream" 1 584 "int8" `378 
f G "gets" 1 584 "void(*int8 string,int8 stream)" `376 
f B "kbhit" 1 585 "int8()" `379 
v L "stream" 1 586 "int8" `381 
f G "kbhit" 1 586 "int8(int8 stream)" `380 
v L "string" 1 587 "*int8" `383 
f B "printf" 1 587 "void(*int8 string,*int8 _VA_LIST)" `382 
v L "stream" 1 588 "int8" `386 
v L "string" 1 588 "*int8" `387 
f B "fprintf" 1 588 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `385 
f B "putc_send" 1 589 "void()" `389 
v L "stream" 1 590 "int8" `391 
f B "fputc_send" 1 590 "void(int8 stream)" `390 
f B "rcv_buffer_full" 1 591 "int8()" `392 
v L "stream" 1 592 "int8" `394 
f G "rcv_buffer_full" 1 592 "int8(int8 stream)" `393 
f B "rcv_buffer_bytes" 1 593 "int16()" `395 
v L "stream" 1 594 "int8" `397 
f G "rcv_buffer_bytes" 1 594 "int16(int8 stream)" `396 
f B "tx_buffer_full" 1 595 "int8()" `398 
v L "stream" 1 596 "int8" `400 
f G "tx_buffer_full" 1 596 "int8(int8 stream)" `399 
f B "tx_buffer_bytes" 1 597 "int16()" `401 
v L "stream" 1 598 "int8" `403 
f G "tx_buffer_bytes" 1 598 "int16(int8 stream)" `402  "#use i2c() Prototypes:"
f B "i2c_read" 1 601 "int8()" `404 
v L "stream" 1 602 "int8" `406 
f G "i2c_read" 1 602 "int8(int8 stream)" `405 
v L "stream" 1 603 "int8" `408 
v L "ack" 1 603 "int8" `409 
f G "i2c_read" 1 603 "int8(int8 stream,int8 ack)" `407 
v L "data" 1 604 "int8" `411 
f B "i2c_write" 1 604 "int8(int8 data)" `410 
v L "stream" 1 605 "int8" `413 
v L "data" 1 605 "int8" `414 
f G "i2c_write" 1 605 "int8(int8 stream,int8 data)" `412 
f B "i2c_start" 1 606 "void()" `415 
v L "stream" 1 607 "int8" `417 
f G "i2c_start" 1 607 "void(int8 stream)" `416 
v L "stream" 1 608 "int8" `419 
v L "restart" 1 608 "int8" `420 
f G "i2c_start" 1 608 "void(int8 stream,int8 restart)" `418 
f B "i2c_stop" 1 609 "void()" `421 
v L "stream" 1 610 "int8" `423 
f G "i2c_stop" 1 610 "void(int8 stream)" `422 
f B "i2c_isr_state" 1 611 "int8()" `424 
v L "addr" 1 612 "int8" `426 
f B "i2c_slaveaddr" 1 612 "void(int8 addr)" `425 
v L "stream" 1 613 "int8" `428 
v L "addr" 1 613 "int8" `429 
f G "i2c_slaveaddr" 1 613 "void(int8 stream,int8 addr)" `427 
f B "i2c_poll" 1 614 "int8()" `430 
v L "stream" 1 615 "int8" `432 
f G "i2c_poll" 1 615 "int8(int8 stream)" `431 
v L "baud" 1 616 "int32" `434 
f B "i2c_init" 1 616 "void(int32 baud)" `433 
v L "stream" 1 617 "int8" `436 
v L "baud" 1 617 "int32" `437 
f G "i2c_init" 1 617 "void(int8 stream,int32 baud)" `435  "#use spi() Prototypes:"
f B "spi_xfer" 1 620 "int8()" `438 
f G "spi_xfer" 1 621 "int16()" `439 
f G "spi_xfer" 1 622 "int32()" `440 
v L "data" 1 623 "int8" `442 
f G "spi_xfer" 1 623 "int8(int8 data)" `441 
v L "data" 1 624 "int16" `444 
f G "spi_xfer" 1 624 "int16(int16 data)" `443 
v L "data" 1 625 "int32" `446 
f G "spi_xfer" 1 625 "int32(int32 data)" `445 
v L "stream" 1 626 "int8" `448 
v L "data" 1 626 "int8" `449 
f G "spi_xfer" 1 626 "int8(int8 stream,int8 data)" `447 
v L "stream" 1 627 "int8" `448 
v L "data" 1 627 "int16" `452 
f G "spi_xfer" 1 627 "int16(int8 stream,int16 data)" `450 
v L "stream" 1 628 "int8" `448 
v L "data" 1 628 "int32" `455 
f G "spi_xfer" 1 628 "int32(int8 stream,int32 data)" `453 
v L "stream" 1 629 "int8" `457 
v L "data" 1 629 "int8" `458 
v L "bits" 1 629 "int8" `459 
f G "spi_xfer" 1 629 "int8(int8 stream,int8 data,int8 bits)" `456 
v L "stream" 1 630 "int8" `457 
v L "data" 1 630 "int16" `458 
v L "bits" 1 630 "int8" `463 
f G "spi_xfer" 1 630 "int16(int8 stream,int16 data,int8 bits)" `460 
v L "stream" 1 631 "int8" `457 
v L "data" 1 631 "int32" `458 
v L "bits" 1 631 "int8" `467 
f G "spi_xfer" 1 631 "int32(int8 stream,int32 data,int8 bits)" `464 
v L "baud" 1 632 "int32" `469 
f B "spi_init" 1 632 "void(int32 baud)" `468 
v L "stream" 1 633 "int8" `471 
v L "baud" 1 633 "int32" `472 
f G "spi_init" 1 633 "void(int8 stream,int32 baud)" `470 
v L "baud" 1 634 "int32" `474 
f B "spi_speed" 1 634 "void(int32 baud)" `473 
v L "stream" 1 635 "int8" `476 
v L "baud" 1 635 "int32" `477 
f G "spi_speed" 1 635 "void(int8 stream,int32 baud)" `475 
v L "stream" 1 636 "int8" `479 
v L "baud" 1 636 "int32" `480 
v L "clock" 1 636 "int32" `481 
f G "spi_speed" 1 636 "void(int8 stream,int32 baud,int32 clock)" `478 
v L "data" 1 637 "int8" `483 
f B "spi_prewrite" 1 637 "void(int8 data)" `482 
v L "data" 1 638 "int16" `485 
f G "spi_prewrite" 1 638 "void(int16 data)" `484 
v L "data" 1 639 "int32" `487 
f G "spi_prewrite" 1 639 "void(int32 data)" `486 
v L "??65535" 1 640 "int8" `489 
v L "data" 1 640 "int8" `490 
f G "spi_prewrite" 1 640 "void(int8 ,int8 data)" `488 
v L "??65535" 1 641 "int8" `489 
v L "data" 1 641 "int16" `493 
f G "spi_prewrite" 1 641 "void(int8 ,int16 data)" `491 
v L "??65535" 1 642 "int8" `489 
v L "data" 1 642 "int32" `496 
f G "spi_prewrite" 1 642 "void(int8 ,int32 data)" `494 
f B "spi_xfer_in" 1 643 "int8()" `497 
f G "spi_xfer_in" 1 644 "int16()" `498 
f G "spi_xfer_in" 1 645 "int32()" `499 
v L "bits" 1 646 "int8" `501 
f G "spi_xfer_in" 1 646 "int8(int8 bits)" `500 
v L "bits" 1 647 "int8" `503 
f G "spi_xfer_in" 1 647 "int16(int8 bits)" `502 
v L "bits" 1 648 "int8" `505 
f G "spi_xfer_in" 1 648 "int32(int8 bits)" `504 
v L "stream" 1 649 "int8" `507 
v L "bits" 1 649 "int8" `508 
f G "spi_xfer_in" 1 649 "int8(int8 stream,int8 bits)" `506 
v L "stream" 1 650 "int8" `507 
v L "bits" 1 650 "int8" `511 
f G "spi_xfer_in" 1 650 "int16(int8 stream,int8 bits)" `509 
v L "stream" 1 651 "int8" `507 
v L "bits" 1 651 "int8" `514 
f G "spi_xfer_in" 1 651 "int32(int8 stream,int8 bits)" `512  "#use rtos() Prototypes:"
f B "rtos_run" 1 654 "void()" `515 
f B "rtos_yield" 1 655 "void()" `516 
v L "task" 1 656 "int8" `518 
f B "rtos_enable" 1 656 "void(int8 task)" `517 
v L "task" 1 657 "int8" `520 
f B "rtos_disable" 1 657 "void(int8 task)" `519 
f B "rtos_terminate" 1 658 "void()" `521 
v L "flag" 1 659 "int8" `523 
f B "rtos_await" 1 659 "void(int8 flag)" `522 
v L "sem" 1 660 "int8" `525 
f B "rtos_wait" 1 660 "void(int8 sem)" `524 
v L "sem" 1 661 "int8" `527 
f B "rtos_signal" 1 661 "void(int8 sem)" `526 
v L "task" 1 662 "int8" `529 
v L "msg" 1 662 "int8" `530 
f B "rtos_msg_send" 1 662 "void(int8 task,int8 msg)" `528 
f B "rtos_msg_read" 1 663 "int8()" `531 
f B "rtos_msg_poll" 1 664 "int8()" `532 
v L "task" 1 665 "int8" `534 
f B "rtos_overrun" 1 665 "int8(int8 task)" `533 
v L "task" 1 666 "int8" `536 
v L "stat" 1 666 "*int8" `537 
f B "rtos_stats" 1 666 "void(int8 task,*int8 stat)" `535  "#use timer() Prototypes:"
f B "get_ticks" 1 669 "int8()" `538 
f G "get_ticks" 1 670 "int16()" `539 
f G "get_ticks" 1 671 "int32()" `540 
v L "stream" 1 672 "int8" `542 
f G "get_ticks" 1 672 "int8(int8 stream)" `541 
v L "stream" 1 673 "int8" `544 
f G "get_ticks" 1 673 "int16(int8 stream)" `543 
v L "stream" 1 674 "int8" `546 
f G "get_ticks" 1 674 "int32(int8 stream)" `545 
v L "value" 1 675 "int8" `548 
f B "set_ticks" 1 675 "void(int8 value)" `547 
v L "value" 1 676 "int16" `550 
f G "set_ticks" 1 676 "void(int16 value)" `549 
v L "value" 1 677 "int32" `552 
f G "set_ticks" 1 677 "void(int32 value)" `551 
v L "stream" 1 678 "int8" `554 
v L "value" 1 678 "int8" `555 
f G "set_ticks" 1 678 "void(int8 stream,int8 value)" `553 
v L "stream" 1 679 "int8" `554 
v L "value" 1 679 "int16" `558 
f G "set_ticks" 1 679 "void(int8 stream,int16 value)" `556 
v L "stream" 1 680 "int8" `554 
v L "value" 1 680 "int32" `561 
f G "set_ticks" 1 680 "void(int8 stream,int32 value)" `559  "#use pwm() Prototypes:"
f B "pwm_on" 1 683 "void()" `562 
v L "stream" 1 684 "int8" `564 
f G "pwm_on" 1 684 "void(int8 stream)" `563 
f B "pwm_off" 1 685 "void()" `565 
v L "stream" 1 686 "int8" `567 
f G "pwm_off" 1 686 "void(int8 stream)" `566 
v L "duty" 1 687 "int16" `569 
f B "pwm_set_duty" 1 687 "void(int16 duty)" `568 
v L "stream" 1 688 "int8" `571 
v L "duty" 1 688 "int16" `572 
f G "pwm_set_duty" 1 688 "void(int8 stream,int16 duty)" `570 
v L "percent" 1 689 "int16" `574 
f B "pwm_set_duty_percent" 1 689 "void(int16 percent)" `573 
v L "stream" 1 690 "int8" `576 
v L "percent" 1 690 "int16" `577 
f G "pwm_set_duty_percent" 1 690 "void(int8 stream,int16 percent)" `575 
v L "frequency" 1 691 "int32" `579 
f B "pwm_set_frequency" 1 691 "void(int32 frequency)" `578 
v L "stream" 1 692 "int8" `581 
v L "frequency" 1 692 "int32" `582 
f G "pwm_set_frequency" 1 692 "void(int8 stream,int32 frequency)" `580  "#use capture() Prototypes:"
f B "get_capture_time" 1 695 "int16()" `583 
v L "stream" 1 696 "int8" `585 
f G "get_capture_time" 1 696 "int16(int8 stream)" `584 
f B "get_capture_event" 1 697 "int8()" `586 
v L "stream" 1 698 "int8" `588 
f G "get_capture_event" 1 698 "int8(int8 stream)" `587  "Enviroment Prototypes:"
c L "get_capture_event" 1 1 2 "FUNCTION"
v L "address" 1 711 "int16" `590 
f B "goto_address" 1 711 "void(int16 address)" `589 
v L "label" 1 712 "int16" `592 
f B "label_address" 1 712 "int16(int16 label)" `591  "Program Memory Prototypes:"
v L "address" 1 715 "int16" `594 
v L "dataptr" 1 715 "*int8" `595 
v L "count" 1 715 "int16" `596 
f B "read_program_memory" 1 715 "void(int16 address,*int8 dataptr,int16 count)" `593 
v L "address" 1 716 "int16" `598 
f B "read_program_eeprom" 1 716 "int16(int16 address)" `597 
v L "address" 1 717 "int16" `600 
f B "erase_program_eeprom" 1 717 "void(int16 address)" `599 
v L "address" 1 718 "int16" `602 
v L "dataptr" 1 718 "*int8" `603 
v L "count" 1 718 "int16" `604 
f B "write_program_memory" 1 718 "void(int16 address,*int8 dataptr,int16 count)" `601 
v L "address" 1 719 "int16" `606 
v L "data" 1 719 "int16" `607 
f B "write_program_eeprom" 1 719 "void(int16 address,int16 data)" `605  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 724 "int16" `608 
v L "address" 1 729 "__EEADDRESS__" `610 
f B "read_eeprom" 1 729 "int8(__EEADDRESS__ address)" `609 
v L "address" 1 730 "__EEADDRESS__" `612 
v L "value" 1 730 "int8" `613 
f B "write_eeprom" 1 730 "void(__EEADDRESS__ address,int8 value)" `611  "INT"
c L "write_eeprom" 1 1 4 "FUNCTION"
v L "interrupt" 1 737 "int32" `615 
f B "enable_interrupts" 1 737 "void(int32 interrupt)" `614 
v L "interrupt" 1 738 "int32" `617 
f B "disable_interrupts" 1 738 "void(int32 interrupt)" `616 
v L "interrupt" 1 739 "int32" `619 
f B "clear_interrupt" 1 739 "void(int32 interrupt)" `618 
v L "interrupt" 1 740 "int32" `621 
f B "interrupt_active" 1 740 "int8(int32 interrupt)" `620 
v L "interrupt" 1 741 "int32" `623 
f B "interrupt_enabled" 1 741 "int8(int32 interrupt)" `622 
v L "source" 1 742 "int8" `625 
v L "edge" 1 742 "int8" `626 
f B "ext_int_edge" 1 742 "void(int8 source,int8 edge)" `624 
v L "address" 1 743 "int16" `628 
f B "jump_to_irs" 1 743 "void(int16 address)" `627  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 745 "0x40"
d G "H_TO_L" 1 746 "0"
d G "GLOBAL" 1 748 "0xF2C0"
d G "PERIPH" 1 749 "0xF240"
d G "INT_RTCC" 1 750 "0x00F220"
d G "INT_TIMER0" 1 751 "0x00F220"
d G "INT_TIMER1" 1 752 "0x009D01"
d G "INT_TIMER2" 1 753 "0x009D02"
d G "INT_TIMER3" 1 754 "0x00A002"
d G "INT_EXT_L2H" 1 755 "0x5000F210"
d G "INT_EXT_H2L" 1 756 "0x6000F210"
d G "INT_EXT" 1 757 "0x00F210"
d G "INT_EXT1_L2H" 1 758 "0x5001F008"
d G "INT_EXT1_H2L" 1 759 "0x6001F008"
d G "INT_EXT1" 1 760 "0x00F008"
d G "INT_EXT2_L2H" 1 761 "0x5002F010"
d G "INT_EXT2_H2L" 1 762 "0x6002F010"
d G "INT_EXT2" 1 763 "0x00F010"
d G "INT_RB" 1 764 "0x00FFF208"
d G "INT_AD" 1 765 "0x009D40"
d G "INT_RDA" 1 766 "0x009D20"
d G "INT_TBE" 1 767 "0x009D10"
d G "INT_SSP" 1 768 "0x009D08"
d G "INT_CCP1" 1 769 "0x009D04"
d G "INT_CCP2" 1 770 "0x00A001"
d G "INT_BUSCOL" 1 771 "0x00A008"
d G "INT_LOWVOLT" 1 772 "0x00A004"
d G "INT_COMP" 1 773 "0x00A040"
d G "INT_EEPROM" 1 774 "0x00A010"
d G "INT_OSCF" 1 775 "0x00A080"
D G "S1_R" 0 7 "PIN_B2"
D G "S1_Y" 0 8 "PIN_B1"
D G "S1_G" 0 9 "PIN_B0"
D G "S2_R" 0 10 "PIN_B5"
D G "S2_Y" 0 11 "PIN_B4"
D G "S2_G" 0 12 "PIN_B3"
V G "segmentos" 0 14 "int8[1]" `633 
F G "main" 0 28 "void()" `634 
C L "main" 0 31 1 "FUNCTION"
C L "main" 0 31 1 "FUNCTION"
C L "main" 0 31 1 "FUNCTION"
C L "main" 0 31 1 "FUNCTION"
C L "main" 0 31 1 "FUNCTION"
C L "main" 0 31 1 "FUNCTION"
C L "main" 0 31 1 "FUNCTION"
C L "main" 0 31 1 "FUNCTION"
C L "main" 0 31 2 "FUNCTION"
C L "main" 0 31 1 "FUNCTION"
C L "main" 0 31 1 "FUNCTION"
C L "main" 0 31 1 "FUNCTION"
C L "main" 0 31 1 "FUNCTION"
C L "main" 0 31 1 "FUNCTION"
C L "main" 0 31 1 "FUNCTION"
V L "numero" 0 71 "int8" `637 
C L "main" 0 31 2 "FUNCTION"
C L "main" 0 31 1 "FUNCTION"
C L "main" 0 31 1 "FUNCTION"
C L "main" 0 31 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
